#!/usr/bin/env python

import sys
import h5py

from mayavi import mlab

from openquake.baselib import sap

from myv_plt_tools import plot_mesh, plot_catalogue, plot_ruptures


def get_mesh(fname, label):
    f = h5py.File(fname, 'r')
    return f['slab'][label][:]


def plot(smooth_hdf5_fname, pickle_fname, rupture_hdf5_fname,
         label_ruptures, vsc=-1.0):
    """
    """
    vsc = float(vsc)
    #
    # open file with the results of the smoothing
    f = h5py.File(smooth_hdf5_fname, 'r')
    x = f['lons'][:]
    y = f['lats'][:]
    z = f['deps'][:]
    v = f['values'][:]
    #
    # plot 3D mesh obtained with the smoothing
    src = mlab.pipeline.scalar_scatter(x, y, z*vsc, v)
    pts = mlab.pipeline.glyph(src, scale_mode='none', scale_factor=.1)
    #
    # ruptures
    if label_ruptures is not None:
        plot_ruptures(label_ruptures, rupture_hdf5_fname, vsc)
    #
    # top and bottom mesh
    if rupture_hdf5_fname is not None:
        msh = get_mesh(rupture_hdf5_fname, 'top')
        plot_mesh(msh, vsc, color=(0, 1, 0))
        msh = get_mesh(rupture_hdf5_fname, 'bot')
        plot_mesh(msh, vsc, color=(1, 1, 0))
    #
    # plot catalogue
    if pickle_fname is not None:
        plot_catalogue(pickle_fname, vsc)
    #
    # finishing
    mlab.show()
    #
    # close hdf5 file
    f.close()


def main(argv):
    """
    For help type: ./plt_smoothing
    """
    p = sap.Script(plot)
    msg = 'HDF5 file containing the smoothign results'
    p.arg(name='smooth_hdf5_fname', help=msg)
    p.opt(name='pickle_fname', help='Catalogue (hmtk format) pickle filename')
    p.opt(name='rupture_hdf5_fname', help='HDF5 file with ruptures')
    msg = 'The label used to select ruptures (note it requires option -r)'
    p.opt(name='label_ruptures', help=msg)
    p.opt(name='vsc', help='Scaling factor for z values')

    if len(argv) < 1:
        print(p.help())
    else:
        p.callfunc()


if __name__ == '__main__':
    main(sys.argv[1:])
