#!/usr/bin/env python

import sys
import h5py

import matplotlib.pyplot as plt
import matplotlib.colors as colors

from mpl_toolkits.mplot3d import Axes3D

from openquake.baselib import sap

from mpl_plt_tools import plot_mesh, plot_catalogue


def get_mesh(fname, label):
    f = h5py.File(fname, 'r')
    return f['slab'][label][:]


def plot(smooth_hdf5_fname, pickle_fname, rupture_hdf5_fname, vsc=1.0):
    """
    """
    vsc = float(vsc)
    #
    # open file with results
    f = h5py.File(smooth_hdf5_fname, 'r')
    x = f['lons'][:]
    y = f['lats'][:]
    z = f['deps'][:]
    v = f['values'][:]
    #
    #
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    vmin = max(v.min(), 1e-5)
    scp = ax.scatter(x, y, z*vsc, c=v, cmap='plasma',
                     norm=colors.LogNorm(vmin=vmin, vmax=v.max()))
    #
    # top mesh
    if rupture_hdf5_fname is not None:
        msh = get_mesh(rupture_hdf5_fname, 'top')
        plot_mesh(ax, msh, vsc)
    #
    # plot catalogue
    if pickle_fname is not None:
        plot_catalogue(ax, pickle_fname, vsc)
    #
    # colorbar
    cb = fig.colorbar(scp, ax=ax, extend='max', shrink=0.5, fraction=0.05,
                      pad=0.04)
    cb.set_label('Number of occurrences')
    #
    # finishing
    ax.invert_zaxis()
    plt.show()
    #
    # close hdf5 file
    f.close()


def main(argv):
    """
    For help type: ./plt_smoothing
    """
    p = sap.Script(plot)
    p.arg(name='smooth_hdf5_fname', help='HDF5 file containing the smoothign results')
    p.opt(name='pickle_fname', help='Catalogue (hmtk format) pickle filename')
    p.opt(name='rupture_hdf5_fname', help='HDF5 file with ruptures')
    p.opt(name='vsc', help='Scaling factor for z values')

    if len(argv) < 1:
        print(p.help())
    else:
        p.callfunc()


if __name__ == '__main__':
    main(sys.argv[1:])
